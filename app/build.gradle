import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion project.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.wang.gates.quickmaths"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode 3
        versionName "3.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':UIReferenceImplementation')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:${project.ext.supportLibraryVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:design:${project.ext.supportLibraryVersion}"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
task DownloadAndExtractAssets(type: Copy) {
    def sourceUrls = ['https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-diagram.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-raw-content.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-math.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-text-en_US.zip']
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")
        def zipDir = new File(tmpAssetsDir, "zips")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        if (!zipDir.isDirectory())
            zipDir.mkdirs()

        sourceUrls.each { sourceUrl ->
            ant.get(src: sourceUrl, dest: zipDir.getPath())
        }

        File[] zipFiles = FileUtils.listFiles(zipDir, FileFilterUtils.suffixFileFilter("zip"), FileFilterUtils.trueFileFilter())
        zipFiles.each { File zipFile ->
            from zipTree(zipFile)
            into tmpAssetsDir
        }
    }
}

task CopyAssets(type: Copy, dependsOn: DownloadAndExtractAssets) {
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        def recognitionAssetDir = new File(tmpAssetsDir, "recognition-assets/")

        println "Copying downloaded assets from $recognitionAssetDir to $targetDir"
        from recognitionAssetDir
        into targetDir

        doLast {
            tmpAssetsDir.deleteDir()
        }
    }
}

preBuild.dependsOn(CopyAssets)
